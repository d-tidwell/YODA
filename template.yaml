AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  YODA MD Service 2

Parameters:

  CognitoDomain:
    Type: String
    Description: A name for the cognito Domain
    Default: "yoda-service-login-domain-do-not-delete"

  S3Bucket:
    Type: String
    Description: Parameter to specify the S3 Bucket to use for deployment

  FrontendDeployment:
    Default: remote
    Type: String
    AllowedValues:
      - local
      - remote
    ConstraintDescription: Must specify 'local' or 'remote' for FrontendDeployment.

Conditions:
  DeployCloudFront: !Equals
    - !Ref FrontendDeployment
    - remote

Globals:
  Function:
    Timeout: 20

  Api:
    Cors:
      AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
      AllowHeaders: "'content-type,authorization'"
      AllowOrigin: "'*'"
    Auth:
      DefaultAuthorizer: CognitoAuthorizer
      AddDefaultAuthorizerToCorsPreflight: false
      Authorizers:
        CognitoAuthorizer:
          UserPoolArn: !GetAtt UserPool.Arn

Resources:

  #-----------------------------------------------------
  # Cognito Configuration for user management
  #-----------------------------------------------------

    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        AccountRecoverySetting:
          RecoveryMechanisms:
            - Name: verified_email
              Priority: 1
        UsernameAttributes:
          - email
        UsernameConfiguration:
          CaseSensitive: false
        AutoVerifiedAttributes:
          - email
        UserPoolName: !Sub ${CognitoDomain}-user-pool
        Schema:
          - Name: email
            AttributeDataType: String
            Mutable: false
            Required: true
          - Name: name
            AttributeDataType: String
            Mutable: true
            Required: true

    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref UserPool
        AllowedOAuthFlowsUserPoolClient: true
        CallbackURLs:
          - http://localhost:8000
          - !If
            - DeployCloudFront
            - !Sub "https://${CloudfrontDistribution.DomainName}"
            - !Ref "AWS::NoValue"
        LogoutURLs:
          - http://localhost:8000
          - !If
            - DeployCloudFront
            - !Sub "https://${CloudfrontDistribution.DomainName}"
            - !Ref "AWS::NoValue"
        AllowedOAuthFlows:
          - code
          - implicit
        AllowedOAuthScopes:
          - phone
          - email
          - openid
          - profile
        SupportedIdentityProviders:
          - COGNITO
        PreventUserExistenceErrors: ENABLED

    UserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain: !Ref CognitoDomain
        UserPoolId: !Ref UserPool


    #-----------------------------------------------------
    # CloudFront Configuration
    #-----------------------------------------------------

    CloudFrontOriginAccessIdentity:
      Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
      Condition: DeployCloudFront
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: 'Serverless frontend website'

    CloudfrontDistribution:
      Type: "AWS::CloudFront::Distribution"
      Condition: DeployCloudFront
      Properties:
        DistributionConfig:
          Comment: "Cloudfront distribution for serverless website"
          DefaultRootObject: "index.html"
          Enabled: true
          HttpVersion: http2
          PriceClass: PriceClass_100
          # List of origins that Cloudfront will connect to
          Origins:
            - Id: s3-website
              DomainName: !Sub "${S3Bucket}.s3.us-east-2.amazonaws.com"
              OriginPath: /static
              S3OriginConfig:
                # Restricting Bucket access through an origin access identity
                OriginAccessIdentity:
                  Fn::Sub: 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
          # To connect the CDN to the origins you need to specify behaviours
          DefaultCacheBehavior:
            # Compress resources automatically ( gzip )
            Compress: 'true'
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            ForwardedValues:
              QueryString: false
            TargetOriginId: s3-website
            ViewerProtocolPolicy : redirect-to-https
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad

    S3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Condition: DeployCloudFront
      Properties:
        Bucket: !Ref S3Bucket
        PolicyDocument:
          # Restricting access to cloudfront only.
          Statement:
            -
              Effect: Allow
              Action: 
                - 's3:GetObject'
                - 's3:PutObject'
              Resource:
                - !Sub "arn:aws:s3:::${S3Bucket}/*"
              Principal:
                AWS: 
                  - !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}"
                  - !GetAtt AccessRole.Arn 


    #-----------------------------------------------------
    # Role/Permissions/Policy Configuration
    #-----------------------------------------------------

    AccessRole:
      Type: AWS::IAM::Role
      Properties:
        ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
          - 'arn:aws:iam::aws:policy/AWSLambdaExecute'
          - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Policies:
          - PolicyName: 'WriteToCloudWatch'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - cloudwatch:PutMetricData
                  Resource: '*'
          - PolicyName: 'AccessPatientTable'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action: dynamodb:*
                  Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/patients_"

          - PolicyName: 'AccessProviderTable'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action: dynamodb:*
                  Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/providers_"

          - PolicyName: 'AccessphrsTable'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action: dynamodb:*
                  Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/phrs_"

          - PolicyName: 'AccessDictationTable'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action: dynamodb:*
                  Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/dictations_"

    #-----------------------------------------------------
    # Lambda Functions Configuration
    #-----------------------------------------------------

    CreatePatientLambda:
      Type: AWS::Serverless::Function
      Properties:
        Role: !GetAtt AccessRole.Arn
        CodeUri: YodaServiceLambda
        Handler: com.nashss.se.yodaservice.lambda.CreatePatientLambda::handleRequest
        Runtime: java11
        Architectures:
          - x86_64
        MemorySize: 512
        Environment:
          Variables:
            JAVA_TOOL_OPTIONS:  -XX:+TieredCompilation -XX:TieredStopAtLevel=1
        Events:
          YodaServiceLambda:
            Type: Api
            Properties:
              Path: /patient/new
              Method: post

    CreatePHRLambda:
      Type: AWS::Serverless::Function
      Properties:
        Role: !GetAtt AccessRole.Arn
        CodeUri: YodaServiceLambda
        Handler: com.nashss.se.yodaservice.lambda.CreatePHRLambda::handleRequest
        Runtime: java11
        Architectures:
          - x86_64
        MemorySize: 512
        Environment:
          Variables:
            JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
        Events:
          YodaServiceLambda:
            Type: Api
            Properties:
              Path: /patient/phr/{patientId}
              Method: post

    AddPatientToProviderLambda:
      Type: AWS::Serverless::Function
      Properties:
        Role: !GetAtt AccessRole.Arn
        CodeUri: YodaServiceLambda
        Handler: com.nashss.se.yodaservice.lambda.AddPatientToProviderLambda::handleRequest
        Runtime: java11
        Architectures:
          - x86_64
        MemorySize: 512
        Environment:
          Variables:
            JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
        Events:
          YodaServiceLambda:
            Type: Api
            Properties:
              Path: /provider/{providerName}/{patientId}
              Method: post

    RemovePatientFromProviderLambda:
      Type: AWS::Serverless::Function
      Properties:
        Role: !GetAtt AccessRole.Arn
        CodeUri: YodaServiceLambda
        Handler: com.nashss.se.yodaservice.lambda.RemovePatientFromProviderLambda::handleRequest
        Runtime: java11
        Architectures:
          - x86_64
        MemorySize: 512
        Environment:
          Variables:
            JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
        Events:
          YodaServiceLambda:
            Type: Api
            Properties:
              Path: /provider/remove/{patientId}/{providerName}
              Method: put

    GetPresignedS3Lambda:
      Type: AWS::Serverless::Function
      Properties:
        Role: !GetAtt AccessRole.Arn
        CodeUri: YodaServiceLambda
        Handler: com.nashss.se.yodaservice.lambda.GetPresigneds3Lambda::handleRequest
        Runtime: java11
        Architectures:
          - x86_64
        MemorySize: 512
        Environment:
          Variables:
            JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
        Events:
          YodaServiceLambda:
            Type: Api
            Properties:
              Path: /dictation/audio/{filename}
              Method: get

    GetAllPatientsLambda:
      Type: AWS::Serverless::Function
      Properties:
        Role: !GetAtt AccessRole.Arn
        CodeUri: YodaServiceLambda
        Handler: com.nashss.se.yodaservice.lambda.GetAllPatientsLambda::handleRequest
        Runtime: java11
        Architectures:
          - x86_64
        MemorySize: 512
        Environment:
          Variables:
            JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
        Events:
          YodaServiceLambda:
            Type: Api
            Properties:
              Path: /patient/all/{providerName}
              Method: get

    GetAllPHRLambda:
      Type: AWS::Serverless::Function
      Properties:
        Role: !GetAtt AccessRole.Arn
        CodeUri: YodaServiceLambda
        Handler: com.nashss.se.yodaservice.lambda.GetAllPHRLambda::handleRequest
        Runtime: java11
        Architectures:
          - x86_64
        MemorySize: 512
        Environment:
          Variables:
            JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
        Events:
          YodaServiceLambda:
            Type: Api
            Properties:
              Path: /patient/byId/{patientId}
              Method: get

    GetOpenPHRByProviderLambda:
      Type: AWS::Serverless::Function
      Properties:
        Role: !GetAtt AccessRole.Arn
        CodeUri: YodaServiceLambda
        Handler: com.nashss.se.yodaservice.lambda.GetOpenPHRByProviderLambda::handleRequest
        Runtime: java11
        Architectures:
          - x86_64
        MemorySize: 512
        Environment:
          Variables:
            JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
        Events:
          YodaServiceLambda:
            Type: Api
            Properties:
              Path: /phr/byProviderId/{providerName}
              Method: get

    GetPHRRangeLambda:
      Type: AWS::Serverless::Function
      Properties:
        Role: !GetAtt AccessRole.Arn
        CodeUri: YodaServiceLambda
        Handler: com.nashss.se.yodaservice.lambda.GetPHRRangeLambda::handleRequest
        Runtime: java11
        Architectures:
          - x86_64
        MemorySize: 512
        Environment:
          Variables:
            JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
        Events:
          YodaServiceLambda:
            Type: Api
            Properties:
              Path: /patient/byDateRange/{patientId}
              Method: get

    GetProviderLambda:
      Type: AWS::Serverless::Function
      Properties:
        Role: !GetAtt AccessRole.Arn
        CodeUri: YodaServiceLambda
        Handler: com.nashss.se.yodaservice.lambda.GetProviderLambda::handleRequest
        Runtime: java11
        Architectures:
          - x86_64
        MemorySize: 512
        Environment:
          Variables:
            JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
        Events:
          YodaServiceLambda:
            Type: Api
            Properties:
              Path: /provider/{providerName}
              Method: get
      
    CreateProviderLambda:
      Type: AWS::Serverless::Function
      Properties:
        Role: !GetAtt AccessRole.Arn
        CodeUri: YodaServiceLambda
        Handler: com.nashss.se.yodaservice.lambda.CreateProviderLambda::handleRequest
        Runtime: java11
        Architectures:
          - x86_64
        MemorySize: 512
        Environment:
          Variables:
            JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
        Events:
          YodaServiceLambda:
            Type: Api
            Properties:
              Path: /provider/create/{providerName}/{providerEmail}
              Method: post

    GetPatientLambda:
      Type: AWS::Serverless::Function
      Properties:
        Role: !GetAtt AccessRole.Arn
        CodeUri: YodaServiceLambda
        Handler: com.nashss.se.yodaservice.lambda.GetPatientLambda::handleRequest
        Runtime: java11
        Architectures:
          - x86_64
        MemorySize: 512
        Environment:
          Variables:
            JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
        Events:
          YodaServiceLambda:
            Type: Api
            Properties:
              Path: /patient/{patientId}
              Method: get

    GetPHRLambda:
      Type: AWS::Serverless::Function
      Properties:
        Role: !GetAtt AccessRole.Arn
        CodeUri: YodaServiceLambda
        Handler: com.nashss.se.yodaservice.lambda.GetPHRLambda::handleRequest
        Runtime: java11
        Architectures:
          - x86_64
        MemorySize: 512
        Environment:
          Variables:
            JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
        Events:
          YodaServiceLambda:
            Type: Api
            Properties:
              Path: /patient/phr/single/{phrId}
              Method: get

    UpdatePHRLambda:
      Type: AWS::Serverless::Function
      Properties:
        Role: !GetAtt AccessRole.Arn
        CodeUri: YodaServiceLambda
        Handler: com.nashss.se.yodaservice.lambda.UpdatePHRLambda::handleRequest
        Runtime: java11
        Architectures:
          - x86_64
        MemorySize: 512
        Environment:
          Variables:
            JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
        Events:
          YodaServiceLambda:
            Type: Api
            Properties:
              Path: /patient/PHR/update/{phrId}
              Method: put

    UpdateDictationLambda:
      Type: AWS::Serverless::Function
      Properties:
        Role: !GetAtt AccessRole.Arn
        CodeUri: YodaServiceLambda
        Handler: com.nashss.se.yodaservice.lambda.UpdateDictationLambda::handleRequest
        Runtime: java11
        Timeout: 600
        Architectures:
          - x86_64
        MemorySize: 512
        Environment:
          Variables:
            JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
        Events:
          YodaServiceLambda:
            Type: Api
            Properties:
              Path: /dictate/{PhrId}/{PhrDate}/{fileName}/{type}
              Method: put

    #-----------------------------------------------------
    # DynamoDB Configuration
    #-----------------------------------------------------

    PatientsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: "patientId"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "patientId"
            KeyType: "HASH"
        BillingMode: "PAY_PER_REQUEST"
        TableName: "patients_"

    ProvidersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: "name"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "name"
            KeyType: "HASH"
        BillingMode: "PAY_PER_REQUEST"
        TableName: "providers_"

    PhrsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: "phrId"
            AttributeType: "S"
          - AttributeName: "recordDate"
            AttributeType: "S"
          - AttributeName: "providerName"
            AttributeType: "S"
          - AttributeName: "patientId"
            AttributeType: "S"
          - AttributeName: "status"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "phrId"
            KeyType: "HASH"
          - AttributeName: "recordDate"
            KeyType: "RANGE"
        GlobalSecondaryIndexes:
          - IndexName: "ProviderStatusIndex"
            KeySchema:
              - AttributeName: "providerName"
                KeyType: "HASH"
              - AttributeName: "status"
                KeyType: "RANGE"
            Projection:
              ProjectionType: "ALL"
          - IndexName: "PatientDateIndex"
            KeySchema:
              - AttributeName: "patientId"
                KeyType: "HASH"
              - AttributeName: "recordDate"
                KeyType: "RANGE"
            Projection:
              ProjectionType: "ALL"
        BillingMode: "PAY_PER_REQUEST"
        TableName: "phrs_"

    DictationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: "dictationId"
            AttributeType: "S"
          - AttributeName: "recordDate"
            AttributeType: "S"
          - AttributeName: "type"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "dictationId"
            KeyType: "HASH"
          - AttributeName: "recordDate"
            KeyType: "RANGE"
        GlobalSecondaryIndexes:
          - IndexName: "DateTypeIndex"
            KeySchema:
              - AttributeName: "recordDate"
                KeyType: "HASH"
              - AttributeName: "type"
                KeyType: "RANGE"
            Projection:
              ProjectionType: "ALL"
        BillingMode: "PAY_PER_REQUEST"
        TableName: "dictations_"

#-----------------------------------------------------
# The outputs defined below will be printed
#  to the screen after a successful deploy
#-----------------------------------------------------

Outputs:

  CognitoUserPoolId:
    Value: !Ref UserPool
    Description: "The Cognito User Pool ID (COGNITO_USER_POOL_ID)."
  CognitoUserPoolClientId:
    Value: !Ref UserPoolClient
    Description: "The Cognito User Pool Client ID (COGNITO_USER_POOL_CLIENT_ID)."
  CognitoDomain:
    Value: !Sub "${CognitoDomain}.auth.us-east-2.amazoncognito.com"
    Description: "The Cognito Domain (COGNITO_DOMAIN)."

  ApiBaseUrl:
    Description: "API Gateway endpoint base URL for Prod stage (API_BASE_URL)."
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"

  CognitoRedirectSignin:
    Description: "The URL of the deployed front-end application (COGNITO_REDIRECT_SIGNIN)."
    Value: !Sub "https://${CloudfrontDistribution.DomainName}"
    Condition: DeployCloudFront
  CognitoRedirectSignout:
    Description: "The URL of the deployed front-end application (COGNITO_REDIRECT_SIGNOUT)."
    Value: !Sub "https://${CloudfrontDistribution.DomainName}"
    Condition: DeployCloudFront